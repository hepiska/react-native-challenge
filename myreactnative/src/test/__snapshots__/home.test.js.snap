// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`home test rendered 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View
    style={
        Object {
            "alignItems": "center",
            "flex": 1,
            "width": "100%",
          }
    }
>
    <Connect(SearchBox) />
    <Connect(HomeInfo) />
    <View
        style={
            Object {
                "width": "100%",
              }
        }
    >
        <Button
            buttonStyle={
                Object {
                    "marginLeft": 0,
                    "marginRight": 0,
                  }
            }
            icon={
                Object {
                    "name": "cloud",
                  }
            }
            onPress={[Function]}
            title="Forecast"
        />
    </View>
</View>,
  "nodes": Array [
    <View
      style={
            Object {
                  "alignItems": "center",
                  "flex": 1,
                  "width": "100%",
                }
      }
>
      <Connect(SearchBox) />
      <Connect(HomeInfo) />
      <View
            style={
                  Object {
                        "width": "100%",
                      }
            }
      >
            <Button
                  buttonStyle={
                        Object {
                              "marginLeft": 0,
                              "marginRight": 0,
                            }
                  }
                  icon={
                        Object {
                              "name": "cloud",
                            }
                  }
                  onPress={[Function]}
                  title="Forecast"
            />
      </View>
</View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Home
        navigation={
                Object {
                        "navigate": [Function],
                      }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Home {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "navigation": Object {
            "navigate": [Function],
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View
          style={
                    Object {
                              "alignItems": "center",
                              "flex": 1,
                              "width": "100%",
                            }
          }
>
          <Connect(SearchBox) />
          <Connect(HomeInfo) />
          <View
                    style={
                              Object {
                                        "width": "100%",
                                      }
                    }
          >
                    <Button
                              buttonStyle={
                                        Object {
                                                  "marginLeft": 0,
                                                  "marginRight": 0,
                                                }
                              }
                              icon={
                                        Object {
                                                  "name": "cloud",
                                                }
                              }
                              onPress={[Function]}
                              title="Forecast"
                    />
          </View>
</View>,
        "_debugID": 2,
        "_renderedOutput": <View
          style={
                    Object {
                              "alignItems": "center",
                              "flex": 1,
                              "width": "100%",
                            }
          }
>
          <Connect(SearchBox) />
          <Connect(HomeInfo) />
          <View
                    style={
                              Object {
                                        "width": "100%",
                                      }
                    }
          >
                    <Button
                              buttonStyle={
                                        Object {
                                                  "marginLeft": 0,
                                                  "marginRight": 0,
                                                }
                              }
                              icon={
                                        Object {
                                                  "name": "cloud",
                                                }
                              }
                              onPress={[Function]}
                              title="Forecast"
                    />
          </View>
</View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Home
    navigation={
        Object {
            "navigate": [Function],
          }
    }
/>,
}
`;
